import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

def generate_synthetic_data():
    np.random.seed(0)
    temperature = 20 + 20 * np.random.rand(100, 1)
    ice_cream_sales = 200 * np.random.rand(100, 1)
    X = np.hstack((temperature, ice_cream_sales))
    daily_profit = 1000 + 30 * temperature + 5 * ice_cream_sales + np.random.randn(100, 1)
    return X, daily_profit

def max_scaling(X):
    return X / X.max(axis=0)

def mean_normalization(X):
    return (X - X.mean(axis=0)) / (X.max(axis=0) - X.min(axis=0))

def z_score_normalization(X):
    scaler = StandardScaler()
    return scaler.fit_transform(X)

def compute_cost(X, y, w, b):
    m = len(X)
    y_pred = np.dot(X, w) + b
    cost = (1/(2*m)) * np.sum((y_pred - y)**2)
    return cost

def gradient_descent(X, y, alpha, num_iterations):
    n_features = X.shape[1]
    w = np.zeros((n_features, 1))
    b = 0
    m = len(X)
    for iteration in range(num_iterations):
        y_pred = np.dot(X, w) + b
        w_gradient = (1 / m) * np.dot(X.T, (y_pred - y))
        b_gradient = (1 / m) * np.sum(y_pred - y)
        w -= alpha * w_gradient.reshape(-1, 1)
        b -= alpha * b_gradient
    return w, b

def evaluate_model(X, y, w, b):
    y_pred = np.dot(X, w) + b
    mse = np.mean((y_pred - y) ** 2)
    return mse

def main():
    X, daily_profit = generate_synthetic_data()
    scaling_methods = [max_scaling, mean_normalization, z_score_normalization]
    scaling_names = ["Max Scaling", "Mean Normalization", "Z-score Normalization"]

    for method, name in zip(scaling_methods, scaling_names):
        print(f"\nMethod: {name}")
        X_scaled = method(X)
        X_train, X_test, y_train, y_test = train_test_split(X_scaled, daily_profit, test_size=0.2, random_state=42)
        w, b = gradient_descent(X_train, y_train, alpha=0.01, num_iterations=1000)
        mse = evaluate_model(X_test, y_test, w, b)
        print(f"Mean Squared Error using {name}: {mse}")

if __name__ == "__main__":
    main()
